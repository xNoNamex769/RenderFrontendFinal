import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './EventoAnalisisIA.css';
import { 
  FaRobot, 
  FaUsers, 
  FaStar, 
  FaTrophy, 
  FaCheckCircle, 
  FaExclamationTriangle,
  FaLightbulb,
  FaBullseye,
  FaChartLine,
  FaCalendarAlt,
  FaMapMarkerAlt,
  FaClock,
  FaInfoCircle,
  FaClipboardList,
  FaUserCheck,
  FaChartBar
} from 'react-icons/fa';
import { MdEventAvailable, MdAnalytics } from 'react-icons/md';
import { IoMdCheckmarkCircleOutline } from 'react-icons/io';
import { BiTargetLock } from 'react-icons/bi';

function EventoAnalisisIA() {
  const [eventos, setEventos] = useState([]);
  const [eventoSeleccionado, setEventoSeleccionado] = useState(null);
  const [analisisIA, setAnalisisIA] = useState(null);
  const [cargando, setCargando] = useState(false);
  const [feedbacks, setFeedbacks] = useState([]);

  // Cargar eventos finalizados
  useEffect(() => {
    cargarEventosFinalizados();
  }, []);

  const cargarEventosFinalizados = async () => {
    try {
      const response = await axios.get('https://render-hhyo.onrender.com/api/evento/publicos');
      const ahora = new Date();
      
      // Filtrar solo eventos que ya terminaron (fecha y hora de fin pasadas)
      const eventosFinalizados = response.data.filter(evento => {
        try {
          // Crear fecha de fin con hora
          const fechaFinStr = `${evento.FechaFin}T${evento.HoraFin || '23:59:59'}`;
          const fechaFin = new Date(fechaFinStr);
          
          // Solo mostrar eventos que ya terminaron
          const yaTermino = fechaFin < ahora;
          
          return yaTermino;
        } catch (error) {
          return false;
        }
      });
      setEventos(eventosFinalizados);
    } catch (error) {
      console.error('Error cargando eventos:', error);
    }
  };

  // Analizar con IA real obteniendo datos reales primero
  const analizarEventoConIA = async (evento) => {
    setCargando(true);
    setEventoSeleccionado(evento);
    
    // Declarar variables fuera del try para que est√©n disponibles en el catch
    let asistenciasReales = 0;
    let feedbacksReales = [];
    let confirmadosReales = 0;
    let tasaAsistencia = 0;
    
    try {
      console.log('üìä Obteniendo datos reales del evento...');
      
      try {
        const resAsistencias = await axios.get(`https://render-hhyo.onrender.com/api/asistencia/evento/${evento.IdEvento}`);
        asistenciasReales = resAsistencias.data.length || 0;
        console.log(`‚úÖ Asistencias encontradas: ${asistenciasReales}`);
      } catch (error) {
        if (error.response?.status === 404) {
          console.log('‚ÑπÔ∏è No hay asistencias registradas (404 - normal)');
        } else {
          console.error('‚ùå Error obteniendo asistencias:', error.message);
        }
      }
      
      // Obtener confirmados
      try {
        const resConfirmados = await axios.get(`https://render-hhyo.onrender.com/api/confirmacion/evento/${evento.IdEvento}`);
        confirmadosReales = resConfirmados.data.length || 0;
        console.log(`‚úÖ Confirmados encontrados: ${confirmadosReales}`);
        
        // Calcular tasa de asistencia (confirmados que asistieron)
        if (confirmadosReales > 0) {
          tasaAsistencia = Math.round((asistenciasReales / confirmadosReales) * 100);
          console.log(`üìä Tasa de asistencia: ${tasaAsistencia}%`);
        }
      } catch (error) {
        if (error.response?.status === 404) {
          console.log('‚ÑπÔ∏è No hay confirmaciones registradas (404 - normal)');
        } else {
          console.error('‚ùå Error obteniendo confirmaciones:', error.message);
        }
      }
      
      // Obtener feedbacks reales si existen
      try {
        const resFeedbacks = await axios.get(`https://render-hhyo.onrender.com/api/feedback/evento/${evento.IdEvento}`);
        feedbacksReales = resFeedbacks.data || [];
        console.log(`‚úÖ Feedbacks encontrados: ${feedbacksReales.length}`);
      } catch (error) {
        if (error.response?.status === 404) {
          console.log('‚ÑπÔ∏è No hay feedbacks registrados (404 - normal)');
        } else {
          console.error('‚ùå Error obteniendo feedbacks:', error.message);
        }
      }
      
      // Resumen de datos obtenidos
      console.log('üìã Resumen de datos:', {
        asistencias: asistenciasReales,
        confirmados: confirmadosReales,
        feedbacks: feedbacksReales.length,
        tasaAsistencia: `${tasaAsistencia}%`
      });
      
      // Llamar a la IA con los datos reales
      console.log('ü§ñ Llamando a OpenAI para an√°lisis...');
      const analisis = await analizarConGeminiIA(evento, asistenciasReales, feedbacksReales, confirmadosReales, tasaAsistencia);
      console.log('‚úÖ An√°lisis de IA completado');
      setAnalisisIA(analisis);
      
    } catch (error) {
      console.error('‚ùå Error en an√°lisis con IA:', error.message || error);
      console.log('üîÑ Generando an√°lisis con datos reales (fallback sin IA)...');
      // Si falla la IA, generar an√°lisis basado en datos reales (sin inventar)
      const analisis = generarAnalisisConDatosReales(evento, asistenciasReales, feedbacksReales, confirmadosReales, tasaAsistencia);
      console.log('‚úÖ An√°lisis generado con datos reales');
      setAnalisisIA(analisis);
    } finally {
      setCargando(false);
    }
  };

  // Funci√≥n para analizar con OpenAI GPT-4 Mini
  // NOTA: Esta funci√≥n puede fallar por CORS al llamar desde el navegador.
  // OpenAI no permite llamadas directas desde el frontend por seguridad.
  // Cuando falla, autom√°ticamente se usa el an√°lisis con datos reales (generarAnalisisConDatosReales)
  const analizarConGeminiIA = async (evento, asistencias, feedbacks, confirmados, tasaAsistencia) => {
    const API_KEY = import.meta.env.VITE_OPENAI_API_KEY ;
    
  
    // Calcular satisfacci√≥n promedio de feedbacks reales
    let satisfaccionPromedio = 0;
    let comentariosFeedback = '';
    
    if (feedbacks.length > 0) {
      const suma = feedbacks.reduce((acc, fb) => acc + (fb.calificacion || 0), 0);
      satisfaccionPromedio = (suma / feedbacks.length).toFixed(1);
      comentariosFeedback = feedbacks.map(fb => `- "${fb.comentario}" (${fb.calificacion}/5)`).join('\n');
    }
    
    const prompt = `
Eres un experto analista de eventos del SENA. Analiza el siguiente evento con DATOS REALES y proporciona un an√°lisis detallado.

EVENTO:
- Nombre: ${evento.NombreEvento}
- Descripci√≥n: ${evento.DescripcionEvento || 'Sin descripci√≥n'}
- Fecha: ${evento.FechaInicio} al ${evento.FechaFin}
- Horario: ${evento.HoraInicio} - ${evento.HoraFin}
- Ubicaci√≥n: ${evento.UbicacionEvento || 'Por confirmar'}
${evento.TipoEvento ? `- Tipo: ${evento.TipoEvento}` : ''}
${evento.CapacidadEvento ? `- Capacidad m√°xima: ${evento.CapacidadEvento} personas` : ''}

DATOS REALES:
- Confirmados (personas que dijeron que asistir√≠an): ${confirmados} personas
- Asistentes reales (personas que S√ç asistieron): ${asistencias} personas
${confirmados > 0 ? `- Tasa de cumplimiento: ${tasaAsistencia}% (${asistencias} de ${confirmados} confirmados asistieron)` : ''}
- Feedbacks recibidos: ${feedbacks.length}
${satisfaccionPromedio > 0 ? `- Satisfacci√≥n promedio: ${satisfaccionPromedio}/5` : ''}

${feedbacks.length > 0 ? `COMENTARIOS DE PARTICIPANTES:\n${comentariosFeedback}` : 'No hay comentarios de participantes a√∫n.'}

${asistencias === 0 && confirmados === 0 ? '\n‚ö†Ô∏è IMPORTANTE: Este evento NO tiene confirmaciones NI asistencias registradas. Analiza bas√°ndote SOLO en la informaci√≥n del evento y recomienda implementar sistema de registro.' : ''}
${confirmados > 0 && asistencias === 0 ? `\n‚ö†Ô∏è CR√çTICO: ${confirmados} personas confirmaron pero NADIE asisti√≥. Analiza qu√© pudo fallar (comunicaci√≥n, recordatorios, inter√©s real, problemas log√≠sticos).` : ''}
${confirmados > 0 && tasaAsistencia < 50 ? `\n‚ö†Ô∏è ALERTA: Tasa de asistencia baja (${tasaAsistencia}%). Muchos confirmaron pero no asistieron. Analiza causas.` : ''}

Proporciona un an√°lisis en el siguiente formato JSON (SOLO JSON, sin texto adicional):
{
  "metricas": {
    "asistentes": ${asistencias},
    "satisfaccion": ${satisfaccionPromedio > 0 ? satisfaccionPromedio : 0},
    "participacion": ${asistencias > 0 ? Math.round((asistencias / 100) * 100) : 0},
    "duracion": "calcula las horas entre ${evento.HoraInicio} y ${evento.HoraFin}",
    "tieneAsistencias": ${asistencias > 0 ? 'true' : 'false'},
    "tieneFeedbacks": ${feedbacks.length > 0 ? 'true' : 'false'}
  },
  "puntosFuertes": [
    ${asistencias === 0 ? `"Genera 2-3 puntos POSITIVOS basados SOLO en la planificaci√≥n: Tipo='${evento.TipoEvento || 'evento'}', Ubicaci√≥n='${evento.UbicacionEvento}', Horario='${evento.HoraInicio}-${evento.HoraFin}', Duraci√≥n. S√© espec√≠fico sobre QU√â est√° bien planeado. NO menciones asistencia."` : `"Genera 4-5 puntos fuertes ESPEC√çFICOS basados en: ${asistencias} asistentes de ${evento.CapacidadEvento || '?'} capacidad (${Math.round((asistencias / (evento.CapacidadEvento || 100)) * 100)}% ocupaci√≥n), satisfacci√≥n ${satisfaccionPromedio}/5, comentarios reales de participantes"`}
  ],
  "areasDeOportunidad": [
    ${asistencias === 0 && confirmados === 0 ? `
    "Sin datos de asistencia ni confirmaciones. Genera 3-4 √°reas ESPEC√çFICAS:"
    "1. PROMOCI√ìN: Especifica D√ìNDE y C√ìMO promocionar (Instagram SENA, carteleras en bloques X, grupos WhatsApp de aprendices)"
    "2. REGISTRO: Especifica QU√â herramienta usar (Google Forms con link corto, c√≥digo QR en entrada, lista f√≠sica)"
    "3. TIMING: Analiza si el horario ${evento.HoraInicio}-${evento.HoraFin} es conveniente para aprendices"
    "4. ATRACTIVO: Qu√© hace falta para que '${evento.NombreEvento}' sea m√°s atractivo"
    ` : ''}
    ${confirmados > 0 && asistencias === 0 ? `
    "CR√çTICO: ${confirmados} confirmaron pero 0 asistieron. Genera 3-4 √°reas ESPEC√çFICAS:"
    "1. RECORDATORIOS: Falta sistema de recordatorios (WhatsApp, email, notificaciones app)"
    "2. HORARIO: ${evento.HoraInicio} puede ser muy temprano/tarde para aprendices"
    "3. UBICACI√ìN: '${evento.UbicacionEvento}' puede ser dif√≠cil de encontrar o poco atractiva"
    "4. INTER√âS REAL: El tema '${evento.NombreEvento}' puede no ser lo que esperaban"
    ` : ''}
    ${confirmados > 0 && asistencias > 0 && tasaAsistencia < 70 ? `
    "Tasa de asistencia baja: ${asistencias}/${confirmados} (${tasaAsistencia}%). Genera 3-4 √°reas ESPEC√çFICAS:"
    "1. COMPROMISO: C√≥mo hacer que los confirmados realmente asistan"
    "2. RECORDATORIOS: Implementar recordatorios 24h y 1h antes"
    "3. INCENTIVOS: Qu√© ofrecer (certificados, refrigerio, puntos extra)"
    "4. BARRERAS: Qu√© impide que asistan (horario, ubicaci√≥n, duraci√≥n de ${evento.HoraInicio}-${evento.HoraFin})"
    ` : ''}
    ${asistencias > 0 && satisfaccionPromedio > 0 && satisfaccionPromedio < 4.0 ? `
    "Satisfacci√≥n baja: ${satisfaccionPromedio}/5. Analiza comentarios reales y genera 3-4 √°reas ESPEC√çFICAS basadas en ellos"
    ` : ''}
    ${asistencias > 0 && evento.CapacidadEvento && asistencias < evento.CapacidadEvento * 0.5 ? `
    "Baja ocupaci√≥n: ${asistencias}/${evento.CapacidadEvento} (${Math.round((asistencias / evento.CapacidadEvento) * 100)}%). Genera √°reas sobre c√≥mo llenar m√°s el evento"
    ` : ''}
    "Cada √°rea debe ser ACCIONABLE, no solo identificar el problema"
  ],
  "recomendaciones": [
    "Genera 3-4 recomendaciones ACCIONABLES y ESPEC√çFICAS para '${evento.NombreEvento}':",
    ${asistencias === 0 && confirmados === 0 ? `
    "CR√çTICO: No hay sistema de registro. Recomendaciones DEBEN incluir:"
    "1. C√≥mo implementar registro (QR en entrada, Google Forms, app espec√≠fica)"
    "2. C√≥mo promocionar mejor el evento (redes sociales, carteleras, grupos WhatsApp)"
    "3. C√≥mo medir impacto sin datos hist√≥ricos"
    ` : ''}
    ${confirmados > 0 && asistencias === 0 ? `
    "CR√çTICO: ${confirmados} confirmaron pero NADIE asisti√≥. Recomendaciones DEBEN incluir:"
    "1. Por qu√© pudo fallar (fecha/hora inadecuada, falta de recordatorios, tema no interesante)"
    "2. C√≥mo enviar recordatorios efectivos (24h antes, 1h antes)"
    "3. C√≥mo hacer el evento m√°s atractivo"
    ` : ''}
    ${confirmados > 0 && tasaAsistencia < 50 ? `
    "ALERTA: Solo ${tasaAsistencia}% de confirmados asisti√≥. Recomendaciones DEBEN incluir:"
    "1. Implementar sistema de recordatorios autom√°ticos"
    "2. Analizar horario y ubicaci√≥n (¬øson convenientes?)"
    "3. Ofrecer incentivos para asistir (certificados, refrigerios, puntos)"
    ` : ''}
    ${asistencias > 0 && satisfaccionPromedio < 3.5 ? `
    "ALERTA: Satisfacci√≥n baja (${satisfaccionPromedio}/5). Recomendaciones DEBEN incluir:"
    "1. Mejorar contenido basado en comentarios: ${comentariosFeedback.substring(0, 100)}"
    "2. Ajustar duraci√≥n del evento"
    "3. Mejorar log√≠stica (sonido, espacio, materiales)"
    ` : ''}
    "Cada recomendaci√≥n debe tener:",
    {
      "tipo": "Log√≠stica/Contenido/Promoci√≥n/Seguimiento",
      "prioridad": "Alta/Media/Baja",
      "descripcion": "Acci√≥n ESPEC√çFICA y CONCRETA que el instructor puede hacer YA",
      "impacto": "Resultado MEDIBLE esperado (ej: 'Aumentar asistencia en 30%', 'Mejorar satisfacci√≥n a 4.5/5')"
    }
  ],
  "actividadesSugeridas": [
    "Genera 3-4 actividades ESPEC√çFICAS que complementen el tema '${evento.NombreEvento}'. Analiza el nombre y descripci√≥n del evento para crear actividades RELEVANTES y COHERENTES con el objetivo del evento. Cada actividad debe:",
    {
      "nombre": "Nombre espec√≠fico relacionado con '${evento.NombreEvento}'",
      "descripcion": "C√≥mo se realiza esta actividad EN EL CONTEXTO de este evento espec√≠fico",
      "duracion": "Tiempo estimado",
      "participantes": "N√∫mero ideal",
      "materiales": "Qu√© se necesita para esta actividad espec√≠fica",
      "objetivo": "Qu√© logra en relaci√≥n al tema '${evento.NombreEvento}'"
    }
  ],
  "mejorasCreativas": [
    "Genera 4-5 ideas INNOVADORAS espec√≠ficas para mejorar '${evento.NombreEvento}'. Las ideas deben estar DIRECTAMENTE relacionadas con el tema del evento:",
    "- Si es sobre igualdad: din√°micas de inclusi√≥n, debates, testimonios",
    "- Si es deportivo: competencias, retos f√≠sicos, gamificaci√≥n",
    "- Si es acad√©mico: talleres pr√°cticos, casos de estudio, simulaciones",
    "- Si es cultural: presentaciones art√≠sticas, exposiciones, intercambios",
    "- Si es tecnol√≥gico: demos en vivo, hackathons, workshops",
    "IMPORTANTE: Todas las ideas deben ser COHERENTES con '${evento.NombreEvento}' y su descripci√≥n: '${evento.DescripcionEvento || 'evento del SENA'}'"
  ],
  "sentimientoGeneral": ${asistencias === 0 ? '"Sin Datos"' : '"Muy Positivo/Positivo/Neutral basado en satisfacci√≥n real"'},
  "prediccionProximoEvento": {
    "asistenciaEstimada": ${asistencias === 0 ? '"No se puede predecir sin datos"' : 'n√∫mero basado en tendencia real'},
    "recomendaciones": ${asistencias === 0 ? '"CR√çTICO: Implementar sistema de registro de asistencia antes del pr√≥ximo evento. Sin datos, no se puede medir √©xito ni hacer mejoras."' : '"recomendaci√≥n basada en datos reales"'}
  },
  "razonSinDatos": ${asistencias === 0 ? '"Este evento no tiene sistema de registro de asistencia implementado. Puede que haya tenido asistentes, pero no hay forma de saberlo. Es fundamental implementar un m√©todo de registro (QR, lista, app) para futuros eventos."' : 'null'}
}`;

    try {
      console.log('üì§ Enviando solicitud a OpenAI...');
      
      const response = await fetch(
        'https://api.openai.com/v1/chat/completions',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${API_KEY}`
          },
          body: JSON.stringify({
            model: 'gpt-4o-mini',
            messages: [
              {
                role: 'system',
                content: 'Eres un experto analista de eventos del SENA que proporciona an√°lisis detallados y recomendaciones accionables. Siempre respondes en formato JSON v√°lido.'
              },
              {
                role: 'user',
                content: prompt
              }
            ],
            temperature: 0.7,
            response_format: { type: "json_object" }
          })
        }
      );

      console.log('üì• Respuesta recibida, status:', response.status);
      
      const data = await response.json();
     
      
      if (data.error) {
    
        throw new Error(data.error.message || 'Error de OpenAI');
      }
      
      if (data.choices && data.choices[0]) {
        const contenido = data.choices[0].message.content;
       
        return JSON.parse(contenido);
      }
      
      throw new Error('No se pudo obtener respuesta de OpenAI');
      
    } catch (error) {
    
    
      throw error;
    }
  };

  // Funci√≥n para generar an√°lisis con datos reales (sin inventar n√∫meros)
  const generarAnalisisConDatosReales = (evento, asistencias, feedbacks, confirmados, tasaAsistencia) => {
    // Calcular satisfacci√≥n real de feedbacks
    let satisfaccionReal = 0;
    if (feedbacks.length > 0) {
      const suma = feedbacks.reduce((acc, fb) => acc + (fb.calificacion || 0), 0);
      satisfaccionReal = parseFloat((suma / feedbacks.length).toFixed(1));
    }
    
    // Calcular participaci√≥n real
    let participacionReal = 0;
    if (confirmados > 0 && asistencias > 0) {
      participacionReal = Math.round((asistencias / confirmados) * 100);
    }
    
    // Determinar si hay datos suficientes
    const sinDatos = asistencias === 0 && confirmados === 0;
    
    return {
      metricas: {
        asistentes: asistencias,
        satisfaccion: satisfaccionReal,
        participacion: participacionReal,
        duracion: calcularDuracion(evento.HoraInicio, evento.HoraFin),
        tieneAsistencias: asistencias > 0,
        tieneFeedbacks: feedbacks.length > 0
      },
      puntosFuertes: sinDatos ? [
        `Evento bien planificado: "${evento.NombreEvento}"`,
        `Ubicaci√≥n definida: ${evento.UbicacionEvento || 'Por confirmar'}`,
        `Horario establecido: ${evento.HoraInicio} - ${evento.HoraFin}`,
        evento.CapacidadEvento ? `Capacidad planificada: ${evento.CapacidadEvento} personas` : 'Evento organizado con anticipaci√≥n'
      ] : [
        asistencias > 0 ? `${asistencias} personas asistieron al evento` : 'Evento realizado',
        satisfaccionReal >= 4 ? `Excelente satisfacci√≥n: ${satisfaccionReal}/5` : satisfaccionReal > 0 ? `Satisfacci√≥n registrada: ${satisfaccionReal}/5` : 'Evento completado',
        tasaAsistencia >= 70 ? `Alta tasa de cumplimiento: ${tasaAsistencia}%` : tasaAsistencia > 0 ? `Tasa de asistencia: ${tasaAsistencia}%` : 'Asistencia registrada',
        evento.UbicacionEvento ? `Ubicaci√≥n: ${evento.UbicacionEvento}` : 'Evento finalizado'
      ],
      areasDeOportunidad: sinDatos ? [
        '‚ö†Ô∏è CR√çTICO: No hay sistema de registro de asistencia implementado',
        'Sin datos de asistencia, no se puede medir el √©xito del evento',
        'Imposible saber cu√°ntas personas asistieron realmente',
        'No se pueden generar mejoras basadas en datos sin informaci√≥n de participantes'
      ] : asistencias === 0 && confirmados > 0 ? [
        `CR√çTICO: ${confirmados} personas confirmaron pero nadie registr√≥ asistencia`,
        'Posible falla en el sistema de registro QR',
        'Falta de comunicaci√≥n sobre c√≥mo registrar asistencia',
        'Necesidad de verificar funcionamiento de c√≥digos QR'
      ] : tasaAsistencia < 50 ? [
        `Baja tasa de asistencia: solo ${tasaAsistencia}% de confirmados asisti√≥`,
        'Implementar sistema de recordatorios 24h y 1h antes del evento',
        'Revisar si el horario es conveniente para los participantes',
        'Considerar incentivos para mejorar el compromiso de asistencia'
      ] : [
        'Continuar mejorando la experiencia del participante',
        'Recopilar m√°s feedback para identificar √°reas espec√≠ficas de mejora',
        'Mantener la calidad del contenido y organizaci√≥n',
        'Explorar nuevas din√°micas para aumentar el engagement'
      ],
      recomendaciones: sinDatos ? [
        {
          tipo: 'CR√çTICO - Sistema',
          prioridad: 'Alta',
          descripcion: 'Implementar URGENTEMENTE un sistema de registro de asistencia (c√≥digos QR, lista digital, app m√≥vil)',
          impacto: 'Permitir√° medir el √©xito de futuros eventos y tomar decisiones basadas en datos reales'
        },
        {
          tipo: 'Promoci√≥n',
          prioridad: 'Alta',
          descripcion: 'Crear estrategia de difusi√≥n en redes sociales SENA, carteleras f√≠sicas y grupos de WhatsApp',
          impacto: 'Aumentar√° la visibilidad y confirmaciones para pr√≥ximos eventos'
        },
        {
          tipo: 'Seguimiento',
          prioridad: 'Media',
          descripcion: 'Establecer m√©tricas claras: confirmaciones, asistencia real, satisfacci√≥n, engagement',
          impacto: 'Permitir√° comparar eventos y medir mejoras continuas'
        }
      ] : asistencias === 0 && confirmados > 0 ? [
        {
          tipo: 'Sistema',
          prioridad: 'Alta',
          descripcion: 'Verificar que los c√≥digos QR funcionen correctamente antes del evento',
          impacto: 'Evitar√° p√©rdida de datos de asistencia en futuros eventos'
        },
        {
          tipo: 'Comunicaci√≥n',
          prioridad: 'Alta',
          descripcion: 'Explicar claramente a los participantes c√≥mo y d√≥nde escanear el QR (entrada y salida)',
          impacto: 'Mejorar√° el registro de asistencia en un 80%'
        },
        {
          tipo: 'Log√≠stica',
          prioridad: 'Media',
          descripcion: 'Colocar se√±alizaci√≥n visible con instrucciones de registro en la entrada',
          impacto: 'Facilitar√° el proceso de registro para los asistentes'
        }
      ] : [
        {
          tipo: 'Mejora Continua',
          prioridad: 'Media',
          descripcion: 'Analizar los feedbacks recibidos para identificar aspectos espec√≠ficos a mejorar',
          impacto: 'Aumentar√° la satisfacci√≥n en pr√≥ximos eventos'
        },
        {
          tipo: 'Engagement',
          prioridad: 'Media',
          descripcion: 'Incluir actividades interactivas y din√°micas durante el evento',
          impacto: 'Incrementar√° la participaci√≥n activa de los asistentes'
        },
        {
          tipo: 'Seguimiento',
          prioridad: 'Baja',
          descripcion: 'Enviar encuesta post-evento para obtener m√°s feedback detallado',
          impacto: 'Proporcionar√° insights valiosos para futuros eventos'
        }
      ],
      actividadesSugeridas: generarActividadesSegunTipo(evento),
      mejorasCreativas: generarMejorasSegunEvento(evento, asistencias),
      sentimientoGeneral: sinDatos ? 'Sin Datos' : satisfaccionReal >= 4 ? 'Muy Positivo' : satisfaccionReal >= 3.5 ? 'Positivo' : satisfaccionReal > 0 ? 'Neutral' : asistencias > 0 ? 'Positivo' : 'Sin Datos',
      prediccionProximoEvento: {
        asistenciaEstimada: sinDatos ? 'No se puede predecir sin datos hist√≥ricos' : asistencias > 0 ? Math.round(asistencias * 1.1) : 'Implementar sistema de registro primero',
        recomendaciones: sinDatos ? 
          'CR√çTICO: Implementar sistema de registro de asistencia antes del pr√≥ximo evento. Sin datos, es imposible medir el √©xito o hacer predicciones.' :
          asistencias === 0 && confirmados > 0 ?
          'Verificar el sistema de registro QR y capacitar al personal sobre su uso correcto.' :
          `Basado en ${asistencias} asistentes reales, se estima una asistencia similar o mayor si se mantiene la calidad del evento.`
      },
      razonSinDatos: sinDatos ? 
        `El evento "${evento.NombreEvento}" finaliz√≥ el ${evento.FechaFin}, pero no tiene sistema de registro de asistencia implementado. Puede que hayan asistido personas, pero no hay forma de saberlo. Es fundamental implementar c√≥digos QR, listas digitales o alg√∫n m√©todo de registro para futuros eventos.` :
        null
    };
  };
  
  // Funci√≥n auxiliar para calcular duraci√≥n
  const calcularDuracion = (horaInicio, horaFin) => {
    try {
      const inicio = new Date(`2000-01-01T${horaInicio}`);
      const fin = new Date(`2000-01-01T${horaFin}`);
      const diff = (fin - inicio) / (1000 * 60 * 60);
      return `${diff.toFixed(1)} horas`;
    } catch {
      return 'No especificada';
    }
  };
  
  // Generar actividades seg√∫n el tipo de evento
  const generarActividadesSegunTipo = (evento) => {
    const nombre = evento.NombreEvento.toLowerCase();
    const descripcion = (evento.DescripcionEvento || '').toLowerCase();
    
    // Detectar tipo de evento por palabras clave
    if (nombre.includes('igualdad') || nombre.includes('g√©nero') || descripcion.includes('igualdad')) {
      return [
        {
          nombre: 'Panel de Testimonios',
          descripcion: 'Invitar a personas que compartan experiencias sobre igualdad de g√©nero en el √°mbito laboral',
          duracion: '45 minutos',
          participantes: '3-5 panelistas',
          materiales: 'Micr√≥fono, proyector para presentaciones',
          objetivo: 'Generar conciencia a trav√©s de experiencias reales'
        },
        {
          nombre: 'Debate Moderado',
          descripcion: 'Discusi√≥n estructurada sobre desaf√≠os actuales en igualdad de g√©nero',
          duracion: '30 minutos',
          participantes: 'Toda la audiencia',
          materiales: 'Tarjetas para preguntas, moderador',
          objetivo: 'Fomentar el pensamiento cr√≠tico y la participaci√≥n activa'
        }
      ];
    }
    
    // Actividades gen√©ricas
    return [
      {
        nombre: 'Din√°mica de Integraci√≥n',
        descripcion: 'Actividad rompe hielo para generar conexi√≥n entre participantes',
        duracion: '15-20 minutos',
        participantes: 'Todos los asistentes',
        materiales: 'Ninguno o materiales simples',
        objetivo: 'Crear ambiente de confianza y participaci√≥n'
      },
      {
        nombre: 'Sesi√≥n de Preguntas y Respuestas',
        descripcion: 'Espacio abierto para que los participantes hagan preguntas',
        duracion: '20-30 minutos',
        participantes: 'Toda la audiencia',
        materiales: 'Micr√≥fono, tarjetas para preguntas',
        objetivo: 'Resolver dudas y profundizar en temas de inter√©s'
      }
    ];
  };
  
  // Generar mejoras seg√∫n el evento
  const generarMejorasSegunEvento = (evento, asistencias) => {
    if (asistencias === 0) {
      return [
        'Implementar c√≥digos QR visibles en entrada y salida del evento',
        'Crear campa√±a de difusi√≥n en redes sociales del SENA 2 semanas antes',
        'Enviar recordatorios por WhatsApp y correo 24h y 1h antes del evento',
        'Ofrecer certificados digitales de asistencia como incentivo',
        'Colocar se√±alizaci√≥n clara desde la entrada principal hasta el lugar del evento'
      ];
    }
    
    return [
      'Incluir din√°micas interactivas cada 30 minutos para mantener la atenci√≥n',
      'Ofrecer refrigerio o coffee break para mejorar la experiencia',
      'Crear hashtag oficial del evento para generar contenido en redes sociales',
      'Implementar sistema de gamificaci√≥n con premios para participaci√≥n activa',
      'Grabar el evento y compartir resumen en redes sociales del SENA'
    ];
  };

  const getSentimientoColor = (sentimiento) => {
    switch(sentimiento) {
      case 'Muy Positivo': return '#4CAF50';
      case 'Positivo': return '#8BC34A';
      case 'Neutral': return '#FFC107';
      default: return '#9E9E9E';
    }
  };

  const getPrioridadColor = (prioridad) => {
    switch(prioridad) {
      case 'Alta': return '#f44336';
      case 'Media': return '#FF9800';
      case 'Baja': return '#2196F3';
      default: return '#9E9E9E';
    }
  };

  return (
    <div className="evento-analisis-container">
      <div className="analisis-ia-header">
        <div className="analisis-ia-header-icon">
          <MdAnalytics size={50} />
        </div>
        <div className="analisis-ia-header-text">
          <h1 className="analisis-ia-titulo">
            An√°lisis Inteligente de Eventos
          </h1>
          <p className="analisis-ia-subtitulo">
            <FaInfoCircle size={16} /> Esta herramienta analiza tus eventos finalizados usando Inteligencia Artificial. 
            Obt√©n insights sobre asistencia, satisfacci√≥n y recomendaciones personalizadas para mejorar futuros eventos.
          </p>
        </div>
      </div>

      <div className="analisis-contenido">
        {/* Lista de eventos */}
        <div className="eventos-lista-panel">
          <h2>
            <MdEventAvailable size={24} /> Eventos Finalizados
          </h2>
          {eventos.length === 0 ? (
            <div className="sin-eventos">
              <p>No hay eventos finalizados para analizar</p>
            </div>
          ) : (
            <div className="eventos-grid">
              {eventos.map(evento => (
                <div 
                  key={evento.IdEvento}
                  className={`evento-card ${eventoSeleccionado?.IdEvento === evento.IdEvento ? 'seleccionado' : ''}`}
                  onClick={() => analizarEventoConIA(evento)}
                >
                  <div className="evento-card-header">
                    <h3>{evento.NombreEvento}</h3>
                    <span className="evento-fecha">
                      <FaCalendarAlt size={14} /> {evento.FechaInicio}
                    </span>
                  </div>
                  {evento.DescripcionEvento && 
                   !evento.DescripcionEvento.toLowerCase().includes('aprobado') && 
                   evento.DescripcionEvento.trim() !== '' && (
                    <p className="evento-descripcion">{evento.DescripcionEvento}</p>
                  )}
                  <div className="evento-info-mini">
                    <span className="evento-ubicacion">
                      <FaMapMarkerAlt size={14} /> {evento.UbicacionEvento || 'Por confirmar'}
                    </span>
                    <span className="evento-horario">
                      <FaClock size={14} /> {evento.HoraInicio}
                    </span>
                  </div>
                  <button className="btn-analizar">
                    <FaChartBar size={16} /> Analizar con IA
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Panel de an√°lisis */}
        <div className="analisis-panel">
          {!eventoSeleccionado && !cargando && (
            <div className="analisis-placeholder">
              <div className="placeholder-icon"><FaRobot size={60} color="#4CAF50" /></div>
              <h3>Selecciona un evento para analizar</h3>
              <p>La IA generar√° insights y recomendaciones autom√°ticamente</p>
            </div>
          )}

          {cargando && (
            <div className="analisis-cargando">
              <div className="spinner"><FaChartLine size={40} color="#4CAF50" /></div>
              <h3>Analizando evento con IA...</h3>
              <p>Procesando datos y generando recomendaciones...</p>
            </div>
          )}

          {analisisIA && !cargando && (
            <div className="analisis-resultados">
              <div className="resultado-header">
                <h2>{eventoSeleccionado.NombreEvento}</h2>
                <div 
                  className="sentimiento-badge"
                  style={{ backgroundColor: getSentimientoColor(analisisIA.sentimientoGeneral) }}
                >
                  {analisisIA.sentimientoGeneral}
                </div>
              </div>

              {/* Info del evento */}
              <div className="evento-info-banner">
                {eventoSeleccionado.TipoEvento && (
                  <div className="info-item">
                    <FaBullseye size={16} /> <strong>Tipo:</strong> {eventoSeleccionado.TipoEvento}
                  </div>
                )}
                <div className="info-item">
                  <FaCalendarAlt size={16} /> <strong>Duraci√≥n:</strong> {eventoSeleccionado.FechaInicio} al {eventoSeleccionado.FechaFin}
                </div>
                {eventoSeleccionado.CapacidadEvento && (
                  <div className="info-item">
                    <FaUsers size={16} /> <strong>Capacidad:</strong> {eventoSeleccionado.CapacidadEvento} personas
                    {analisisIA.metricas.asistentes > 0 && (
                      <span style={{ marginLeft: '10px', color: analisisIA.metricas.asistentes >= eventoSeleccionado.CapacidadEvento * 0.7 ? '#4CAF50' : '#FF9800' }}>
                        ({Math.round((analisisIA.metricas.asistentes / eventoSeleccionado.CapacidadEvento) * 100)}% ocupaci√≥n)
                      </span>
                    )}
                  </div>
                )}
              </div>

              {/* Advertencia si no hay datos */}
              {analisisIA.metricas.asistentes === 0 && (
                <div className="alerta-sin-datos">
                  <FaExclamationTriangle size={18} /> <strong>Sin datos de asistencia:</strong> Este evento no tiene registros de asistencia ni feedbacks. 
                  El an√°lisis se basa √∫nicamente en la informaci√≥n del evento.
                </div>
              )}

              {/* M√©tricas principales */}
              <div className="metricas-grid">
                <div className="metrica-card" style={{ opacity: analisisIA.metricas.asistentes === 0 ? 0.5 : 1 }}>
                  <div className="metrica-icon"><FaUsers color="#4CAF50" size={30} /></div>
                  <div className="metrica-info">
                    <span className="metrica-valor">
                      {analisisIA.metricas.asistentes}
                      {analisisIA.metricas.asistentes === 0 && <small style={{fontSize: '0.5em', display: 'block'}}>Sin datos</small>}
                    </span>
                    <span className="metrica-label">Asistentes Reales</span>
                  </div>
                </div>
                <div className="metrica-card" style={{ opacity: analisisIA.metricas.satisfaccion === 0 ? 0.5 : 1 }}>
                  <div className="metrica-icon"><FaStar color="#FFC107" size={30} /></div>
                  <div className="metrica-info">
                    <span className="metrica-valor">
                      {analisisIA.metricas.satisfaccion}/5
                      {analisisIA.metricas.satisfaccion === 0 && <small style={{fontSize: '0.5em', display: 'block'}}>Sin datos</small>}
                    </span>
                    <span className="metrica-label">Satisfacci√≥n</span>
                  </div>
                </div>
                <div className="metrica-card" style={{ opacity: analisisIA.metricas.participacion === 0 ? 0.5 : 1 }}>
                  <div className="metrica-icon"><FaTrophy color="#2196F3" size={30} /></div>
                  <div className="metrica-info">
                    <span className="metrica-valor">
                      {analisisIA.metricas.participacion}%
                      {analisisIA.metricas.participacion === 0 && <small style={{fontSize: '0.5em', display: 'block'}}>Sin datos</small>}
                    </span>
                    <span className="metrica-label">Participaci√≥n</span>
                  </div>
                </div>
              </div>

              {/* Puntos fuertes */}
              <div className="analisis-seccion">
                <h3>
                  <FaCheckCircle size={20} color="#4CAF50" /> Puntos Fuertes
                </h3>
                <ul className="lista-puntos">
                  {analisisIA.puntosFuertes.map((punto, idx) => (
                    <li key={idx}>‚úì {punto}</li>
                  ))}
                </ul>
              </div>

              {/* √Åreas de oportunidad */}
              <div className="analisis-seccion">
                <h3>
                  <FaExclamationTriangle size={20} color="#FF9800" /> √Åreas de Oportunidad
                </h3>
                <ul className="lista-puntos">
                  {analisisIA.areasDeOportunidad.map((area, idx) => (
                    <li key={idx}>‚ö† {area}</li>
                  ))}
                </ul>
              </div>

              {/* Recomendaciones de IA */}
              <div className="analisis-seccion">
                <h3>
                  <FaLightbulb size={20} color="#FFC107" /> Recomendaciones de IA
                </h3>
                <div className="recomendaciones-grid">
                  {analisisIA.recomendaciones.map((rec, idx) => (
                    <div key={idx} className="recomendacion-card">
                      <div className="recomendacion-header">
                        <span className="recomendacion-tipo">{rec.tipo}</span>
                        <span 
                          className="recomendacion-prioridad"
                          style={{ backgroundColor: getPrioridadColor(rec.prioridad) }}
                        >
                          {rec.prioridad}
                        </span>
                      </div>
                      <p className="recomendacion-descripcion">{rec.descripcion}</p>
                      <div className="recomendacion-impacto">
                        <strong>Impacto:</strong> {rec.impacto}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Actividades Sugeridas */}
              {analisisIA.actividadesSugeridas && analisisIA.actividadesSugeridas.length > 0 && (
                <div className="analisis-seccion">
                  <h3>
                    <BiTargetLock size={22} color="#2196F3" /> Actividades Din√°micas Sugeridas
                  </h3>
                  <div className="actividades-grid">
                    {analisisIA.actividadesSugeridas.map((actividad, idx) => (
                      <div key={idx} className="actividad-card">
                        <div className="actividad-header">
                          <h4><FaBullseye size={18} color="#2196F3" /> {actividad.nombre}</h4>
                          <span className="actividad-duracion"><FaClock size={14} /> {actividad.duracion}</span>
                        </div>
                        <p className="actividad-descripcion">{actividad.descripcion}</p>
                        <div className="actividad-detalles">
                          <div className="actividad-detalle">
                            <FaUsers size={14} color="#666" /> <strong>Participantes:</strong> {actividad.participantes}
                          </div>
                          {actividad.materiales && (
                            <div className="actividad-detalle">
                              <FaClipboardList size={14} color="#666" /> <strong>Materiales:</strong> {actividad.materiales}
                            </div>
                          )}
                          <div className="actividad-objetivo">
                            <FaBullseye size={14} color="#4CAF50" /> <strong>Objetivo:</strong> {actividad.objetivo}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Mejoras Creativas */}
              {analisisIA.mejorasCreativas && analisisIA.mejorasCreativas.length > 0 && (
                <div className="analisis-seccion" style={{ background: 'linear-gradient(135deg, #4CAF50 0%, #388E3C 100%)', color: 'white' }}>
                  <h3 style={{ color: 'white', display: 'flex', alignItems: 'center', gap: '10px' }}>
                    <FaLightbulb size={22} /> Ideas Innovadoras para Mejorar el Evento
                  </h3>
                  <ul className="mejoras-lista">
                    {analisisIA.mejorasCreativas.map((mejora, idx) => (
                      <li key={idx} className="mejora-item">
                        <FaCheckCircle size={16} /> {mejora}
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Raz√≥n de falta de datos */}
              {analisisIA.razonSinDatos && (
                <div className="analisis-seccion" style={{ background: '#fff3cd', borderLeft: '4px solid #ffc107' }}>
                  <h3>
                    <FaExclamationTriangle size={20} color="#856404" /> An√°lisis Limitado
                  </h3>
                  <p style={{ color: '#856404', lineHeight: '1.6' }}>
                    {analisisIA.razonSinDatos}
                  </p>
                </div>
              )}

              {/* Predicci√≥n para pr√≥ximo evento */}
              <div className="analisis-seccion prediccion-seccion">
                <h3 style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                  {analisisIA.metricas.asistentes === 0 ? (
                    <><FaExclamationTriangle size={20} color="#f44336" /> Acci√≥n Requerida</>
                  ) : (
                    <><FaChartLine size={20} color="#4CAF50" /> Predicci√≥n para Pr√≥ximo Evento</>
                  )}
                </h3>
                <div className="prediccion-card">
                  {analisisIA.metricas.asistentes > 0 && (
                    <div className="prediccion-metrica">
                      <span className="prediccion-label">Asistencia Estimada:</span>
                      <span className="prediccion-valor">
                        {analisisIA.prediccionProximoEvento.asistenciaEstimada} personas
                      </span>
                    </div>
                  )}
                  <p className="prediccion-recomendacion">
                    {analisisIA.prediccionProximoEvento.recomendaciones}
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default EventoAnalisisIA;
